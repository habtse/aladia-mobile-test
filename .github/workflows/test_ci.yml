name: Aladia CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  android-build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Set up Flutter
        uses: flutter-actions/setup-flutter@v3
        with:
          version: 'latest'

      - name: Cache Flutter packages
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
      - name: Get dependencies
        run: flutter pub get

      # - name: Analyze code
      #   run: flutter analyze

      - name: Run unit tests
        run: flutter test

      - name: Build for Android (Release)
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  ios-build:
    runs-on: macos-latest
    needs: android-build-and-test
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: flutter-actions/setup-flutter@v3
        with:
          version: 'latest'

      - name: Get dependencies
        run: flutter pub get

      - name: Build for iOS (Release)
        run: flutter build ios --release --no-codesign

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: build/ios/iphoneos/Runner.app

#   integration-tests:
#     runs-on: ubuntu-latest
#     needs: android-build-and-test

#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v4

#       - name: Set up Flutter
#         uses: flutter-actions/setup-flutter@v3
#         with:
#           version: 'latest'

#       - name: Get dependencies
#         run: flutter pub get
      
#       - name: Install Android SDK
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y lib32stdc++6 lib32z1
#           sudo mkdir -p /usr/local/android-sdk
#           sudo chown $USER:$USER /usr/local/android-sdk
#           wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -O cmdline-tools.zip
#           unzip cmdline-tools.zip -d /usr/local/android-sdk/cmdline-tools
#           mv /usr/local/android-sdk/cmdline-tools/cmdline-tools /usr/local/android-sdk/cmdline-tools/latest
#           export ANDROID_HOME=/usr/local/android-sdk
#           export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
#           export PATH=$ANDROID_HOME/platform-tools:$PATH
#           sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0" "system-images;android-33;google_apis;x86_64" "emulator"
#           sdkmanager --licenses
#       - name: Create and Start Emulator
#         run: |
#           echo "no" | avdmanager create avd -n test -k "system-images;android-33;google_apis;x86_64" -d pixel
#           $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -no-boot-anim -accel off &
#           adb wait-for-device
#       - name: Run Flutter Integration Tests
#         run: flutter drive --target=test_driver/app_test.dart

#       - name: Run integration tests
#         run: flutter drive --target=test_driver/app.dart

#   deployment:
#     runs-on: ubuntu-latest
#     needs: ios-build
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v4

#       - name: Deploy to Firebase (Android)
#         run: |
#           echo ${{ secrets.FIREBASE_KEY_FILE }} > firebase_key.json
#           firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
#             --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
#             --token ${{ secrets.FIREBASE_TOKEN }}

#       - name: Deploy to TestFlight (iOS)
#         run: |
#           echo ${{ secrets.APPLE_ID }} | base64 --decode | security import -k login.keychain-db
#           fastlane pilot upload --ipa build/ios/iphoneos/Runner.app
